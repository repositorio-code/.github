name: üìö Documentation Build & Check

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.md'
      - '**/docs/**'
      - '**/documentation/**'
      - 'mkdocs.yml'
      - 'requirements.txt'
  pull_request:
    paths:
      - '**/*.md'
      - '**/docs/**'
      - '**/documentation/**'
      - 'mkdocs.yml'
      - 'requirements.txt'

jobs:
  markdown-check:
    name: üìù Markdown Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîç Check markdown files
      run: |
        echo "üîç Checking markdown files..."
        
        # Find all markdown files
        MD_FILES=$(find . -name "*.md" -not -path "./.git/*" -not -path "./node_modules/*")
        MD_COUNT=$(echo "$MD_FILES" | wc -l)
        
        echo "üìÑ Found $MD_COUNT markdown files"
        
        # Check for required README.md
        if [ -f "README.md" ]; then
          echo "‚úÖ Main README.md exists"
        else
          echo "‚ùå Main README.md missing"
          echo "::error::README.md is required"
          exit 1
        fi
        
        # Save file list for other jobs
        echo "$MD_FILES" > markdown-files.txt

    - name: üìã Check README.md completeness
      run: |
        echo "üîç Checking README.md content..."
        
        # Required sections for academic projects
        REQUIRED_SECTIONS=(
          "# "           # Title
          "## "          # At least one section
          "Descri√ß√£o"    # Description in Portuguese
          "Description"  # Or in English
        )
        
        MISSING_SECTIONS=()
        
        for section in "${REQUIRED_SECTIONS[@]}"; do
          if ! grep -q "$section" README.md; then
            MISSING_SECTIONS+=("$section")
          fi
        done
        
        if [ ${#MISSING_SECTIONS[@]} -eq 0 ]; then
          echo "‚úÖ README.md has good structure"
        else
          echo "‚ö†Ô∏è README.md missing some recommended sections:"
          printf '%s\n' "${MISSING_SECTIONS[@]}"
          echo "::warning::Consider improving README.md structure"
        fi
        
        # Check for academic content
        ACADEMIC_KEYWORDS=("projeto" "disciplina" "curso" "universidade" "professor" "equipe" "objetivos")
        FOUND_KEYWORDS=()
        
        for keyword in "${ACADEMIC_KEYWORDS[@]}"; do
          if grep -qi "$keyword" README.md; then
            FOUND_KEYWORDS+=("$keyword")
          fi
        done
        
        if [ ${#FOUND_KEYWORDS[@]} -gt 0 ]; then
          echo "‚úÖ README.md contains academic context"
          echo "Found keywords: ${FOUND_KEYWORDS[*]}"
        else
          echo "‚ÑπÔ∏è README.md doesn't contain obvious academic context"
        fi

    - name: üîó Check for broken links
      run: |
        echo "üîç Checking for broken internal links..."
        
        # Find markdown files with links
        while IFS= read -r file; do
          if [ -f "$file" ]; then
            echo "Checking links in: $file"
            
            # Extract markdown links [text](link)
            grep -oE '\[([^\]]+)\]\(([^)]+)\)' "$file" | while read -r link; do
              # Extract the URL part
              url=$(echo "$link" | sed 's/.*(\([^)]*\)).*/\1/')
              
              # Skip external links (http/https)
              if [[ "$url" =~ ^https?:// ]]; then
                continue
              fi
              
              # Skip anchors and complex links
              if [[ "$url" =~ ^# ]] || [[ "$url" =~ mailto: ]]; then
                continue
              fi
              
              # Check if file exists (relative to current file location)
              file_dir=$(dirname "$file")
              full_path="$file_dir/$url"
              
              if [ ! -f "$full_path" ] && [ ! -f "$url" ]; then
                echo "‚ö†Ô∏è Potential broken link in $file: $url"
                echo "::warning::Potential broken link: $url in $file"
              fi
            done
          fi
        done < markdown-files.txt

    - name: üìè Check markdown formatting
      run: |
        echo "üîç Checking markdown formatting..."
        
        # Check for common formatting issues
        while IFS= read -r file; do
          if [ -f "$file" ]; then
            echo "Checking formatting in: $file"
            
            # Check for trailing spaces
            if grep -q ' $' "$file"; then
              echo "‚ö†Ô∏è Trailing spaces found in $file"
              echo "::warning::Trailing spaces in $file"
            fi
            
            # Check for tabs (should use spaces)
            if grep -qP '\t' "$file"; then
              echo "‚ö†Ô∏è Tabs found in $file (consider using spaces)"
              echo "::warning::Tabs found in $file"
            fi
            
            # Check for consistent heading style
            h1_count=$(grep -c '^# ' "$file" || true)
            h1_alt_count=$(grep -c '^=\+$' "$file" || true)
            
            if [ "$h1_count" -gt 0 ] && [ "$h1_alt_count" -gt 0 ]; then
              echo "‚ö†Ô∏è Mixed heading styles in $file"
              echo "::warning::Mixed heading styles in $file"
            fi
          fi
        done < markdown-files.txt

    - name: üìä Documentation metrics
      run: |
        echo "üìä Documentation Metrics" > doc-metrics.md
        echo "======================" >> doc-metrics.md
        echo "" >> doc-metrics.md
        
        # Count files and content
        MD_COUNT=$(cat markdown-files.txt | wc -l)
        TOTAL_LINES=$(cat $(cat markdown-files.txt) | wc -l)
        TOTAL_WORDS=$(cat $(cat markdown-files.txt) | wc -w)
        
        echo "### File Statistics:" >> doc-metrics.md
        echo "- Markdown files: $MD_COUNT" >> doc-metrics.md
        echo "- Total lines: $TOTAL_LINES" >> doc-metrics.md
        echo "- Total words: $TOTAL_WORDS" >> doc-metrics.md
        echo "" >> doc-metrics.md
        
        # Check coverage by directory
        echo "### Documentation Coverage:" >> doc-metrics.md
        for dir in components design documentation firmware; do
          if [ -d "$dir" ]; then
            readme_count=$(find "$dir" -name "README.md" | wc -l)
            md_count=$(find "$dir" -name "*.md" | wc -l)
            echo "- $dir/: $md_count files ($readme_count READMEs)" >> doc-metrics.md
          fi
        done
        
        echo "" >> doc-metrics.md
        echo "Generated on: $(date)" >> doc-metrics.md
        
        cat doc-metrics.md

  documentation-build:
    name: üèóÔ∏è Build Documentation Site
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[docs]') || github.event_name == 'pull_request'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        
        # Check if mkdocs config exists
        if [ -f "mkdocs.yml" ]; then
          echo "üìö MkDocs configuration found"
          pip install mkdocs mkdocs-material
          
          # Install additional requirements if present
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
        else
          echo "‚ÑπÔ∏è No MkDocs configuration found"
          echo "Creating basic documentation structure..."
          pip install mkdocs mkdocs-material
        fi

    - name: üèóÔ∏è Build documentation
      run: |
        if [ -f "mkdocs.yml" ]; then
          echo "üèóÔ∏è Building MkDocs site..."
          mkdocs build --verbose
          echo "‚úÖ Documentation built successfully"
        else
          echo "üèóÔ∏è Creating basic documentation structure..."
          
          # Create basic mkdocs.yml
          cat > mkdocs.yml << EOF
        site_name: Project Documentation
        site_description: Academic project documentation
        
        theme:
          name: material
          palette:
            primary: blue
            accent: light-blue
          features:
            - navigation.tabs
            - navigation.top
        
        nav:
          - Home: index.md
          - Hardware: hardware.md
          - Software: software.md
          - Documentation: documentation.md
        
        markdown_extensions:
          - admonition
          - codehilite
          - toc:
              permalink: true
        EOF
          
          # Create docs directory and basic content
          mkdir -p docs
          
          # Copy main README as index
          if [ -f "README.md" ]; then
            cp README.md docs/index.md
          else
            echo "# Project Documentation" > docs/index.md
            echo "Welcome to the project documentation." >> docs/index.md
          fi
          
          # Create section pages from directory READMEs
          for dir in hardware software documentation; do
            if [ -f "$dir/README.md" ]; then
              cp "$dir/README.md" "docs/$dir.md"
            else
              echo "# $dir" > "docs/$dir.md"
              echo "Documentation for $dir component." >> "docs/$dir.md"
            fi
          done
          
          # Build the site
          mkdocs build --verbose
          echo "‚úÖ Basic documentation structure created and built"
        fi

    - name: üìä Documentation analysis
      run: |
        echo "üìä Analyzing built documentation..."
        
        if [ -d "site" ]; then
          HTML_FILES=$(find site -name "*.html" | wc -l)
          SITE_SIZE=$(du -sh site | cut -f1)
          
          echo "‚úÖ Documentation site built:"
          echo "  - HTML files: $HTML_FILES"
          echo "  - Site size: $SITE_SIZE"
          
          # Check for common pages
          COMMON_PAGES=("index.html" "hardware/index.html" "software/index.html")
          for page in "${COMMON_PAGES[@]}"; do
            if [ -f "site/$page" ]; then
              echo "  - ‚úÖ $page"
            else
              echo "  - ‚ùå $page (missing)"
            fi
          done
        else
          echo "‚ùå Documentation build failed - no site directory"
          exit 1
        fi

    - name: üìé Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation-site
        path: site/
        retention-days: 30

    - name: üöÄ Deploy to GitHub Pages (main branch only)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site
        cname: # Add custom domain if needed

  spell-check:
    name: üî§ Spell Check
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[spellcheck]') || github.event_name == 'pull_request'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üì¶ Install spell checker
      run: |
        sudo apt-get update
        sudo apt-get install -y aspell aspell-pt-br aspell-en
        
    - name: üî§ Run spell check
      run: |
        echo "üî§ Running spell check on markdown files..."
        
        # Create custom dictionary for technical terms
        cat > .aspell.personal << EOF
        personal_ws-1.1 en 100
        API
        GPIO
        PWM
        I2C
        SPI
        UART
        USB
        WiFi
        Bluetooth
        IoT
        PCB
        SMD
        KiCad
        Arduino
        ESP32
        STM32
        GitHub
        README
        MCU
        ADC
        DAC
        RTOS
        JSON
        HTTP
        HTTPS
        MQTT
        TCP
        UDP
        HTML
        CSS
        JavaScript
        Python
        firmware
        backend
        frontend
        MHz
        GHz
        kHz
        mA
        mV
        kŒ©
        ¬µF
        nF
        pF
        EOF
        
        # Check Portuguese and English content
        find . -name "*.md" -not -path "./.git/*" | while read -r file; do
          echo "Checking: $file"
          
          # Extract text content (remove code blocks and links)
          sed -E 's/```[^`]*```//g; s/`[^`]*`//g; s/\[[^\]]*\]\([^)]*\)//g' "$file" > /tmp/content.txt
          
          # Check for Portuguese content
          if grep -q '√ß√£o\|√µes\|√ß√£o\|portugu√™s\|projeto\|documenta√ß√£o' "$file"; then
            aspell --lang=pt_BR --personal=.aspell.personal list < /tmp/content.txt > /tmp/misspelled.txt
          else
            aspell --lang=en --personal=.aspell.personal list < /tmp/content.txt > /tmp/misspelled.txt
          fi
          
          if [ -s /tmp/misspelled.txt ]; then
            echo "‚ö†Ô∏è Potential misspellings in $file:"
            cat /tmp/misspelled.txt | head -10
            echo "::warning::Potential misspellings found in $file"
          fi
        done
        
        echo "‚ÑπÔ∏è Spell check completed - review warnings above"
