name: üîß Hardware Design Check

on:
  pull_request:
    paths:
      - '**/*.kicad_*'
      - '**/*.sch'
      - '**/*.brd'
      - '**/*.lib'
      - '**/gerber/**'
      - '**/hardware/**'
      - '**/design/**'
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.kicad_*'
      - '**/*.sch'
      - '**/*.brd'
      - '**/*.lib'
      - '**/gerber/**'
      - '**/hardware/**'
      - '**/design/**'

jobs:
  hardware-check:
    name: üîç Hardware Files Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîç Check for hardware files
      run: |
        echo "üîç Checking for hardware design files..."
        
        # Check for KiCad files
        if find . -name "*.kicad_pro" -o -name "*.kicad_pcb" -o -name "*.kicad_sch" | grep -q .; then
          echo "‚úÖ KiCad project files found"
          KICAD_FILES=true
        else
          echo "‚ÑπÔ∏è No KiCad files found"
          KICAD_FILES=false
        fi
        
        # Check for other EDA files
        if find . -name "*.sch" -o -name "*.brd" -o -name "*.lib" | grep -q .; then
          echo "‚úÖ EDA design files found"
          EDA_FILES=true
        else
          echo "‚ÑπÔ∏è No EDA files found"
          EDA_FILES=false
        fi
        
        # Store results for next steps
        echo "KICAD_FILES=$KICAD_FILES" >> $GITHUB_ENV
        echo "EDA_FILES=$EDA_FILES" >> $GITHUB_ENV

    - name: üìã Validate project structure
      run: |
        echo "üîç Validating hardware project structure..."
        
        # Check for required directories in hardware projects
        REQUIRED_DIRS=("components" "design" "documentation" "firmware")
        MISSING_DIRS=()
        
        for dir in "${REQUIRED_DIRS[@]}"; do
          if [ ! -d "$dir" ]; then
            MISSING_DIRS+=("$dir")
            echo "‚ö†Ô∏è Missing directory: $dir"
          else
            echo "‚úÖ Found directory: $dir"
          fi
        done
        
        if [ ${#MISSING_DIRS[@]} -gt 0 ]; then
          echo "::warning::Missing required directories: ${MISSING_DIRS[*]}"
          echo "::warning::For hardware projects, consider using the template structure"
        fi

    - name: üìÑ Check for documentation
      run: |
        echo "üîç Checking documentation completeness..."
        
        # Check for README files
        if [ -f "README.md" ]; then
          echo "‚úÖ Main README.md found"
          
          # Check README content for hardware projects
          if grep -q -i "hardware\|circuit\|pcb\|schematic" README.md; then
            echo "‚úÖ README mentions hardware content"
          else
            echo "‚ÑπÔ∏è README doesn't mention hardware-specific content"
          fi
        else
          echo "‚ùå Main README.md not found"
          echo "::error::README.md is required for all projects"
          exit 1
        fi
        
        # Check for component documentation
        if [ -d "components" ]; then
          if [ -f "components/README.md" ]; then
            echo "‚úÖ Components documentation found"
          else
            echo "‚ö†Ô∏è components/README.md recommended"
            echo "::warning::Consider adding components/README.md for better documentation"
          fi
        fi
        
        # Check for design documentation
        if [ -d "design" ]; then
          if [ -f "design/README.md" ]; then
            echo "‚úÖ Design documentation found"
          else
            echo "‚ö†Ô∏è design/README.md recommended"
          fi
        fi

    - name: üóÇÔ∏è Validate file organization
      run: |
        echo "üîç Checking file organization..."
        
        # Check for Gerber files in correct location
        if find . -name "*.gbr" -o -name "*.gbl" -o -name "*.gtl" | grep -q .; then
          echo "‚úÖ Gerber files found"
          
          if find design/pcb -name "*.gbr" -o -name "*.gbl" -o -name "*.gtl" 2>/dev/null | grep -q .; then
            echo "‚úÖ Gerber files in design/pcb/ directory"
          else
            echo "‚ö†Ô∏è Gerber files not in standard design/pcb/ location"
            echo "::warning::Consider organizing Gerber files in design/pcb/gerber/"
          fi
        fi
        
        # Check for datasheets
        if find . -name "*.pdf" | grep -i datasheet | grep -q .; then
          echo "‚úÖ Datasheet files found"
          
          if find components/datasheets -name "*.pdf" 2>/dev/null | grep -q .; then
            echo "‚úÖ Datasheets organized in components/datasheets/"
          else
            echo "‚ö†Ô∏è Datasheets not in standard components/datasheets/ location"
          fi
        fi

    - name: üîç Check for common issues
      run: |
        echo "üîç Checking for common hardware project issues..."
        
        # Check for large binary files
        echo "Checking for large files..."
        find . -type f -size +10M -not -path "./.git/*" | while read file; do
          echo "‚ö†Ô∏è Large file detected: $file ($(du -h "$file" | cut -f1))"
          echo "::warning::Large file detected: $file - consider using Git LFS"
        done
        
        # Check for backup files
        if find . -name "*-bak" -o -name "*.bak" -o -name "*~" | grep -q .; then
          echo "‚ö†Ô∏è Backup files found - these should not be committed"
          find . -name "*-bak" -o -name "*.bak" -o -name "*~" | head -5
          echo "::warning::Backup files detected - consider adding to .gitignore"
        fi
        
        # Check for temporary files
        if find . -name "*.tmp" -o -name "*.temp" | grep -q .; then
          echo "‚ö†Ô∏è Temporary files found"
          echo "::warning::Temporary files detected - consider adding to .gitignore"
        fi

    - name: üìä Generate hardware project summary
      run: |
        echo "üìä Hardware Project Summary" > hardware-summary.md
        echo "=========================" >> hardware-summary.md
        echo "" >> hardware-summary.md
        
        # Count different file types
        echo "### File Types Found:" >> hardware-summary.md
        
        KICAD_COUNT=$(find . -name "*.kicad_*" | wc -l)
        SCH_COUNT=$(find . -name "*.sch" | wc -l)
        PCB_COUNT=$(find . -name "*.kicad_pcb" -o -name "*.brd" | wc -l)
        GERBER_COUNT=$(find . -name "*.gbr" -o -name "*.gbl" -o -name "*.gtl" | wc -l)
        PDF_COUNT=$(find . -name "*.pdf" | wc -l)
        
        echo "- KiCad files: $KICAD_COUNT" >> hardware-summary.md
        echo "- Schematic files: $SCH_COUNT" >> hardware-summary.md
        echo "- PCB files: $PCB_COUNT" >> hardware-summary.md
        echo "- Gerber files: $GERBER_COUNT" >> hardware-summary.md
        echo "- PDF documents: $PDF_COUNT" >> hardware-summary.md
        echo "" >> hardware-summary.md
        
        # Check structure compliance
        echo "### Template Compliance:" >> hardware-summary.md
        for dir in components design documentation firmware; do
          if [ -d "$dir" ]; then
            echo "- ‚úÖ $dir/" >> hardware-summary.md
          else
            echo "- ‚ùå $dir/" >> hardware-summary.md
          fi
        done
        
        echo "" >> hardware-summary.md
        echo "Generated on: $(date)" >> hardware-summary.md
        
        # Output summary
        cat hardware-summary.md
        
        # Save as artifact
        echo "::notice::Hardware project validation completed"

    - name: üìé Upload summary
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: hardware-validation-summary
        path: hardware-summary.md
        retention-days: 30

  bill-of-materials:
    name: üìã BOM Validation
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[BOM]') || github.event_name == 'pull_request'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîç Check for BOM files
      run: |
        echo "üîç Looking for Bill of Materials files..."
        
        # Look for BOM files
        BOM_FILES=$(find . -name "*bom*" -o -name "*BOM*" | grep -E "\.(csv|xlsx?|pdf)$" || true)
        
        if [ -n "$BOM_FILES" ]; then
          echo "‚úÖ BOM files found:"
          echo "$BOM_FILES"
          
          # Check if in standard location
          if find design/pcb -name "*bom*" -o -name "*BOM*" 2>/dev/null | grep -q .; then
            echo "‚úÖ BOM files in design/pcb/ directory"
          else
            echo "::warning::BOM files not in standard design/pcb/ location"
          fi
        else
          echo "‚ö†Ô∏è No BOM files found"
          echo "::warning::Consider adding Bill of Materials for hardware projects"
        fi

    - name: üìä BOM Analysis
      run: |
        echo "üìä Analyzing BOM content..."
        
        # Look for CSV BOMs specifically for automated analysis
        CSV_BOMS=$(find . -name "*bom*.csv" -o -name "*BOM*.csv" || true)
        
        if [ -n "$CSV_BOMS" ]; then
          echo "CSV BOM files found for analysis:"
          for bom in $CSV_BOMS; do
            echo "Analyzing: $bom"
            
            # Count components
            COMPONENT_COUNT=$(tail -n +2 "$bom" | wc -l)
            echo "  - Components: $COMPONENT_COUNT"
            
            # Check for required columns (common BOM format)
            if head -1 "$bom" | grep -q -i "reference\|designator"; then
              echo "  - ‚úÖ Reference designators found"
            fi
            
            if head -1 "$bom" | grep -q -i "value"; then
              echo "  - ‚úÖ Component values found"
            fi
            
            if head -1 "$bom" | grep -q -i "footprint\|package"; then
              echo "  - ‚úÖ Footprint information found"
            fi
            
            if head -1 "$bom" | grep -q -i "manufacturer\|mfr"; then
              echo "  - ‚úÖ Manufacturer information found"
            fi
          done
        else
          echo "‚ÑπÔ∏è No CSV BOM files found for automated analysis"
        fi
